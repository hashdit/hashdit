"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2863],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>h});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function p(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),d=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):p(p({},e),t)),n},s=function(t){var e=d(t.components);return a.createElement(o.Provider,{value:e},t.children)},c="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,o=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),c=d(n),m=r,h=c["".concat(o,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,p(p({ref:e},s),{},{components:n})):a.createElement(h,p({ref:e},s))}));function h(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,p=new Array(i);p[0]=m;var l={};for(var o in e)hasOwnProperty.call(e,o)&&(l[o]=e[o]);l.originalType=t,l[c]="string"==typeof t?t:r,p[1]=l;for(var d=2;d<i;d++)p[d]=n[d];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},67893:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>p,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:6},p="HashDit API Authorization",l={unversionedId:"hashdit-api-authorization",id:"hashdit-api-authorization",title:"HashDit API Authorization",description:"When the client calls server\u2019s restful interface, client need to set the following headers to pass the server\u2019s authorization",source:"@site/docs/hashdit-api-authorization.md",sourceDirName:".",slug:"/hashdit-api-authorization",permalink:"/hashdit/docs/hashdit-api-authorization",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docs",previous:{title:"How to use the HashDit API",permalink:"/hashdit/docs/tutorial"},next:{title:"Hashdit API",permalink:"/hashdit/docs/category/hashdit-api-1"}},o={},d=[{value:"Signature\u200b",id:"signature",level:2},{value:"Go",id:"go",level:3},{value:"Java",id:"java",level:3},{value:"Javascript",id:"javascript",level:3},{value:"Python",id:"python",level:3},{value:"Original request",id:"original-request",level:2},{value:"Final header\u200b",id:"final-header",level:2}],s={toc:d};function c(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hashdit-api-authorization"},"HashDit API Authorization"),(0,r.kt)("p",null,"When the client calls server\u2019s restful interface, client need to set the following headers to pass the server\u2019s authorization"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Header"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Content-Type"),(0,r.kt)("td",{parentName:"tr",align:null},"application/json;charset=UTF-8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"X-Signature-appid"),(0,r.kt)("td",{parentName:"tr",align:null},"Appid, unique code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"X-Signature-timestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp, millisecond")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"X-Signature-nonce"),(0,r.kt)("td",{parentName:"tr",align:null},"Random uuid, replace \u201c-\u201d with \u201c\u201d\uff0c32 byte length")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"X-Signature-signature"),(0,r.kt)("td",{parentName:"tr",align:null},"Signature,lowercase,check below for sign details")))),(0,r.kt)("h2",{id:"signature"},"Signature\u200b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"signature = encodeHexString(\n\xa0HmacSHA256(\n\xa0\xa0\xa0appsecret,\n\xa0\xa0\xa0appid;\n\xa0\xa0\xa0timestamp;\n\xa0\xa0\xa0nonce;\n\xa0\xa0\xa0method;\n\xa0\xa0\xa0uri;\n\xa0\xa0\xa0query;\n\xa0\xa0\xa0body\n\xa0)\n)\n")),(0,r.kt)("p",null,"Where uri is the path, multiple key-value pair in query and header should be sorted alphabetically by key, comma separated, example:"),(0,r.kt)("h3",{id:"go"},"Go"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\nappid := "000000000000000000000000000000000000000000000000000000000000000001" // the app id\n\nappSecret := "000000000000000000000000000000000000000000000000000000000000000002" // the app secret\n\ntimestamp := strconv.FormatInt(time.Now().Unix(), 10) // the timestamp\nnonce := strconv.Itoa(rand.Intn(9999999)) \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 // the nonce\nmethod := "POST"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 // the http method\nurl := "/security-api/public/app/v1/detect" \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 // the url of api\nquery := "" \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 // the query string, it can be empty\nbody := string(postBody)\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 // the request body\n\nmsgForSig := GenerateMsgForSig(appid, timestamp, nonce, method, url, query, body)\nsig := ComputeSig(msgForSig, appSecret)\n\nfunc GenerateMsgForSig(appid, timestamp, nonce, method, url, query, body string) string {\n\xa0\xa0\xa0var msgForSig []byte\n\n\xa0\xa0\xa0if query != "" {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0msgForSig = []byte(fmt.Sprintf("%s;%s;%s;%s;%s;%s;%s", appid, timestamp, nonce, method, url, query, body))\n\xa0\xa0\xa0} else {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0msgForSig = []byte(fmt.Sprintf("%s;%s;%s;%s;%s;%s", appid, timestamp, nonce, method, url, body))\n\xa0\xa0\xa0}\n\n\xa0\xa0\xa0return string(msgForSig)\n}\n\nfunc ComputeSig(msgForSig, appSecret string) string {\n\xa0\xa0\xa0message := []byte(msgForSig)\n\n\xa0\xa0\xa0key := []byte(appSecret)\n\xa0\xa0\xa0h := hmac.New(sha256.New, key)\n\xa0\xa0\xa0h.Write(message)\n\n\xa0\xa0\xa0return hex.EncodeToString(h.Sum(nil))\n}\n\n')),(0,r.kt)("h3",{id:"java"},"Java"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// you should provide appId, appSecret and address\nString appId = "000000000000000000000000000000000000000000000000000000000000000001";\nString appSecret = "000000000000000000000000000000000000000000000000000000000000000002";\nString body = "{\\"address\\":\\"0x0000000000000000000000000000000000000003\\"}";\n\nString timeStamp = Long.toString(System.currentTimeMillis());\nString path = "/security-api/public/app/v1/detect";\nString data = String.join(";", appId, timeStamp, "nonce", "POST", path, body);\n\nMac mac = Mac.getInstance("HmacSHA256");\nSecretKeySpec secretKeySpec = new SecretKeySpec(appSecret.getBytes(), "HmacSHA256");\nmac.init(secretKeySpec);\nStringBuilder stringBuilder = new StringBuilder();\nfor (byte aByte : mac.doFinal(data.getBytes())) {\n\xa0\xa0\xa0stringBuilder.append(String.format("%02x", aByte));\n}\n\nString hashInHex = stringBuilder.toString();\nStringEntity requestEntity = new StringEntity(\n\xa0\xa0\xa0body, \n\xa0\xa0\xa0ContentType.APPLICATION_JSON\n);\n\n')),(0,r.kt)("h3",{id:"javascript"},"Javascript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const HmacSHA256 = require('crypto-js/hmac-sha256')\nconst EncodeHex = require('crypto-js/enc-hex')\n\n// you should provide appId, appSecret and address\nconst appId = '000000000000000000000000000000000000000000000000000000000000000001'\nconst appSecret = '000000000000000000000000000000000000000000000000000000000000000002'\nconst body = JSON.stringify({ 'address': '0x0000000000000000000000000000000000000003' })\n\nconst timeStamp = new Date().valueOf().toString()\nconst method = 'POST'\nconst url = '/security-api/public/app/v1/detect'\n\nconst data = [appId, timeStamp, 'nonce', method, url, body].join(';')\nconst hash = HmacSHA256(data, appSecret)\nconst hashInHex = EncodeHex.stringify(hash)\n\n")),(0,r.kt)("h3",{id:"python"},"Python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\nimport time\nimport hmac\nimport hashlib\n\n# you should provide appId, appSecret and address\nappId = '000000000000000000000000000000000000000000000000000000000000000001'\nappSecret = '000000000000000000000000000000000000000000000000000000000000000002'\ntimeStamp = str(int(time.time() * 1000))\n\nmethod = 'POST'\nurl = '/security-api/public/app/v1/detect'\nbody = '{\"address\":\"0x0000000000000000000000000000000000000003\"}'\n\ndata = ';'.join([appId, timeStamp, 'nonce', method, url, body])\n\nhashInHex = hmac.new(bytes(appSecret , 'utf-8'), msg = bytes(data , 'utf-8'), digestmod = hashlib.sha256).hexdigest()\n\n")),(0,r.kt)("h2",{id:"original-request"},"Original request"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"appid"),(0,r.kt)("td",{parentName:"tr",align:null},"13cc90dc5ffa4032acb3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"appsecret"),(0,r.kt)("td",{parentName:"tr",align:null},"cd0ec4b1ca934b188996034541d7e810")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"url"),(0,r.kt)("td",{parentName:"tr",align:null},"/security-api/public/app/v1/detect")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query"),(0,r.kt)("td",{parentName:"tr",align:null},"empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"method"),(0,r.kt)("td",{parentName:"tr",align:null},"POST")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},"{ ",(0,r.kt)("br",null),'"chain_id":"56", ',(0,r.kt)("br",null),'"address":"0x0000000000000000000000000000000000000003"',(0,r.kt)("br",null)," }")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"1657246234465")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nonce"),(0,r.kt)("td",{parentName:"tr",align:null},"791f398e93f14b3e98f916703f777f44")))),(0,r.kt)("p",null,"then\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'signature = encodeHexString(HmacSHA256(\n\xa0cd0ec4b1ca934b188996034541d7e810,\n\xa0\u201813cc90dc5ffa4032acb3;\n\xa01657246234465;\n\xa0791f398e93f14b3e98f916703f777f44;\n\xa0POST;\n/security-api/public/app/v1/detect\n\xa0{\n\xa0\xa0\xa0"chain_id":"56",\n\xa0\xa0\xa0"address":"0x0000000000000000000000000000000000000003"\n\xa0}\u2019\n))\n')),(0,r.kt)("p",null,"Note: The query can be empty. When the query is empty, you do not need to fill in the empty query and \u201c;\u201d in the concatenated string, but directly omit the query and \u201c;\u201d"),(0,r.kt)("h2",{id:"final-header"},"Final header\u200b"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Header"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Content-Type"),(0,r.kt)("td",{parentName:"tr",align:null},"application/json;charset=UTF-8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"X-Signature-appid"),(0,r.kt)("td",{parentName:"tr",align:null},"13cc90dc5ffa4032acb3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"X-Signature-timestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"1657246234465")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"X-Signature-nonce"),(0,r.kt)("td",{parentName:"tr",align:null},"791f398e93f14b3e98f916703f777f44")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"X-Signature-signature"),(0,r.kt)("td",{parentName:"tr",align:null},"bece3956c35911e598635345c0f428122e5423efc9fac68edf9dd377163a9897")))))}c.isMDXComponent=!0}}]);